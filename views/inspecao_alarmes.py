import streamlit as st
import sys
import os
import pandas as pd
import json

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from operations.alarm_operations import (
    save_new_alarm_system, 
    save_alarm_inspection, 
    CHECKLIST_QUESTIONS
)
from auth.auth_utils import (
    get_user_display_name, 
    check_user_access, 
    can_edit,
    has_ai_features
)
from config.page_config import set_page_config
from operations.history import load_sheet_data
from gdrive.config import ALARM_INVENTORY_SHEET_NAME, ALARM_INSPECTIONS_SHEET_NAME
from reports.alarm_report import generate_alarm_inspection_html
from streamlit_js_eval import streamlit_js_eval
import json

set_page_config()

def show_page():
    st.title("üîî Gest√£o de Sistemas de Alarme de Emerg√™ncia")

    # Verifica permiss√µes de acesso
    if not check_user_access("viewer"):
        st.warning("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.")
        return

    # Cria as abas da interface
    tab_inspection, tab_register, tab_quick_register = st.tabs([
        "üìã Realizar Inspe√ß√£o", 
        "‚ûï Cadastrar Novo Sistema (Completo)",
        "‚úçÔ∏è Cadastro R√°pido de Sistema"
    ])

    # Aba de Inspe√ß√£o
    with tab_inspection:
        st.header("Realizar Inspe√ß√£o Peri√≥dica")

        with st.expander("üìÑ Gerar Relat√≥rio Mensal de Inspe√ß√µes"):
            df_inspections_full = load_sheet_data(ALARM_INSPECTIONS_SHEET_NAME)
            df_inventory_full = load_sheet_data(ALARM_INVENTORY_SHEET_NAME)
            
            if df_inspections_full.empty:
                st.info("Nenhuma inspe√ß√£o de sistema de alarme registrada para gerar relat√≥rios.")
            else:
                # Converte a coluna de data para o formato datetime
                df_inspections_full['data_inspecao_dt'] = pd.to_datetime(df_inspections_full['data_inspecao'], errors='coerce')

                # Filtros para m√™s e ano
                today = datetime.now()
                col1, col2 = st.columns(2)
                
                with col1:
                    years_with_data = sorted(df_inspections_full['data_inspecao_dt'].dt.year.unique(), reverse=True)
                    if not years_with_data:
                        years_with_data = [today.year]
                    selected_year = st.selectbox("Selecione o Ano:", years_with_data, key="alarm_report_year")
                
                with col2:
                    months = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                             "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
                    default_month_index = today.month - 1
                    selected_month_name = st.selectbox("Selecione o M√™s:", months, 
                                                     index=default_month_index, key="alarm_report_month")
                
                selected_month_number = months.index(selected_month_name) + 1

                # Filtra os dados pelo m√™s e ano selecionados
                inspections_selected_month = df_inspections_full[
                    (df_inspections_full['data_inspecao_dt'].dt.year == selected_year) &
                    (df_inspections_full['data_inspecao_dt'].dt.month == selected_month_number)
                ].sort_values(by='data_inspecao_dt')

                if inspections_selected_month.empty:
                    st.info(f"Nenhuma inspe√ß√£o foi registrada em {selected_month_name} de {selected_year}.")
                else:
                    st.write(f"Encontradas {len(inspections_selected_month)} inspe√ß√µes em {selected_month_name}/{selected_year}.")
                    
                    if st.button("üìÑ Gerar e Imprimir Relat√≥rio", type="primary", key="generate_alarm_report"):
                        unit_name = st.session_state.get('current_unit_name', 'N/A')
                        report_html = generate_alarm_inspection_html(
                            inspections_selected_month, 
                            df_inventory_full, 
                            unit_name
                        )
                        
                        js_code = f"""
                            const reportHtml = {json.dumps(report_html)};
                            const printWindow = window.open('', '_blank');
                            if (printWindow) {{
                                printWindow.document.write(reportHtml);
                                printWindow.document.close();
                                printWindow.focus();
                                setTimeout(() => {{ 
                                    printWindow.print(); 
                                    printWindow.close(); 
                                }}, 500);
                            }} else {{
                                alert('Por favor, desabilite o bloqueador de pop-ups para este site.');
                            }}
                        """
                        
                        streamlit_js_eval(js_expressions=js_code, key="print_alarm_report_js")
                        st.success("Relat√≥rio enviado para impress√£o!")
        
        st.markdown("---")
        
        # Verifica permiss√µes de edi√ß√£o
        if not can_edit():
            st.warning("Voc√™ precisa de permiss√µes de edi√ß√£o para realizar inspe√ß√µes.")
            st.info("Os dados abaixo s√£o somente para visualiza√ß√£o.")
        else:
            # Carrega invent√°rio de sistemas de alarme
            df_inventory = load_sheet_data(ALARM_INVENTORY_SHEET_NAME)
            
            if df_inventory.empty:
                st.warning("Nenhum sistema de alarme cadastrado. V√° para as abas de cadastro para come√ßar.")
            else:
                equipment_options = ["Selecione um sistema..."] + sorted(df_inventory['id_sistema'].tolist())
                selected_system_id = st.selectbox("Selecione o Sistema para Inspecionar", equipment_options)

                if selected_system_id != "Selecione um sistema...":
                    # Exibe informa√ß√µes do sistema selecionado
                    system_data = df_inventory[df_inventory['id_sistema'] == selected_system_id].iloc[0]
                    location = system_data.get('localizacao', 'N/A')
                    model = system_data.get('modelo', 'N/A')
                    brand = system_data.get('marca', 'N/A')
                    
                    st.info(f"**Localiza√ß√£o:** {location} | **Marca/Modelo:** {brand} / {model}")
                    
                    # Formul√°rio de inspe√ß√£o
                    with st.form(key=f"inspection_form_{selected_system_id}"):
                        inspection_results = {}
                        has_issues = False
                        
                        # Percorre todas as categorias e perguntas do checklist
                        for category, questions in CHECKLIST_QUESTIONS.items():
                            st.subheader(category)
                            for question in questions:
                                key = f"{selected_system_id}_{question}".replace(" ", "_").replace("/", "")
                                answer = st.radio(
                                    label=question, 
                                    options=["Conforme", "N√£o Conforme", "N/A"],
                                    key=key, 
                                    horizontal=True
                                )
                                inspection_results[question] = answer
                                if answer == "N√£o Conforme":
                                    has_issues = True
                        
                        st.markdown("---")
                        
                        # Campo para upload de foto se houver n√£o conformidades
                        photo_file = None
                        if has_issues:
                            st.warning("Foi encontrada pelo menos uma n√£o conformidade. Por favor, anexe uma foto como evid√™ncia.")
                            photo_file = st.file_uploader(
                                "Anexar foto da n√£o conformidade", 
                                type=["jpg", "jpeg", "png"], 
                                key=f"photo_{selected_system_id}"
                            )

                        # Bot√£o para salvar a inspe√ß√£o
                        submitted = st.form_submit_button("‚úÖ Salvar Inspe√ß√£o", type="primary", use_container_width=True)

                        if submitted:
                            # Verifica se foto foi anexada quando necess√°ria
                            if has_issues and not photo_file:
                                st.error("√â obrigat√≥rio anexar uma foto quando h√° n√£o conformidades.")
                            else:
                                # Define o status geral da inspe√ß√£o
                                overall_status = "Reprovado com Pend√™ncias" if has_issues else "Aprovado"
                                
                                # Salva a inspe√ß√£o
                                with st.spinner("Salvando inspe√ß√£o..."):
                                    if save_alarm_inspection(
                                        system_id=selected_system_id,
                                        overall_status=overall_status,
                                        results_dict=inspection_results,
                                        photo_file=photo_file,
                                        inspector_name=get_user_display_name()
                                    ):
                                        st.success(f"Inspe√ß√£o para o sistema '{selected_system_id}' salva com sucesso!")
                                        
                                        # Exibe anima√ß√£o de bal√µes se tudo estiver conforme
                                        if not has_issues:
                                            st.balloons()
                                            
                                        # Limpa o cache e recarrega a p√°gina
                                        st.cache_data.clear()
                                        st.rerun()
                                    else:
                                        st.error("Ocorreu um erro ao salvar a inspe√ß√£o.")

    # Aba de Cadastro Completo
    with tab_register:
        st.header("Cadastrar Novo Sistema de Alarme (Completo)")
        
        # Verifica permiss√µes de edi√ß√£o
        if not can_edit():
            st.warning("Voc√™ precisa de permiss√µes de edi√ß√£o para cadastrar novos sistemas.")
        else:
            with st.form("new_alarm_system_form", clear_on_submit=True):
                st.info("Preencha os dados completos do novo sistema a ser adicionado ao sistema.")
                
                # Campos b√°sicos do formul√°rio
                col1, col2 = st.columns(2)
                new_id = col1.text_input("**ID do Sistema (Obrigat√≥rio)**", help="Use um c√≥digo √∫nico, ex: AL-01")
                new_location = col2.text_input("**Localiza√ß√£o (Obrigat√≥rio)**", help="Descri√ß√£o da localiza√ß√£o f√≠sica, ex: Pr√©dio Administrativo - Recep√ß√£o")
                
                col3, col4 = st.columns(2)
                new_brand = col3.text_input("Marca/Fabricante", help="Ex: Siemens, Johnson Controls, Honeywell")
                new_model = col4.text_input("Modelo", help="Modelo espec√≠fico do sistema")
                
                # Campos adicionais
                st.markdown("---")
                st.subheader("Especifica√ß√µes do Sistema")
                
                col5, col6 = st.columns(2)
                system_type = col5.selectbox(
                    "Tipo de Sistema", 
                    ["Convencional", "Endere√ß√°vel", "Sem Fio", "H√≠brido"]
                )
                install_date = col6.date_input(
                    "Data de Instala√ß√£o", 
                    value=None, 
                    help="Data aproximada da instala√ß√£o"
                )
                
                coverage_area = st.text_input(
                    "√Årea de Cobertura", 
                    placeholder="Ex: 1200m¬≤ / Todos os andares",
                    help="√Årea aproximada ou setores cobertos pelo sistema"
                )
                
                # Observa√ß√µes adicionais
                additional_info = st.text_area(
                    "Observa√ß√µes/Especifica√ß√µes T√©cnicas",
                    placeholder="Ex: Sistema integrado com sprinklers, n√∫mero de detectores, etc."
                )
                
                # Bot√£o para submeter o formul√°rio
                submit_register = st.form_submit_button("‚ûï Cadastrar Sistema", type="primary", use_container_width=True)
                
                if submit_register:
                    # Valida√ß√£o b√°sica
                    if not new_id or not new_location:
                        st.error("Os campos 'ID do Sistema' e 'Localiza√ß√£o' s√£o obrigat√≥rios.")
                    else:
                        # Salva o sistema no invent√°rio
                        with st.spinner("Cadastrando novo sistema..."):
                            if save_new_alarm_system(new_id, new_location, new_brand, new_model):
                                st.success(f"Sistema de alarme '{new_id}' cadastrado com sucesso!")
                                
                                # Exibe as informa√ß√µes adicionais se fornecidas
                                if additional_info:
                                    st.info(f"Observa√ß√µes registradas: {additional_info}")
                                    
                                # Limpa o cache de dados
                                st.cache_data.clear()

    # Aba de Cadastro R√°pido
    with tab_quick_register:
        st.header("Cadastro R√°pido de Sistema")
        
        # Verifica permiss√µes de edi√ß√£o
        if not can_edit():
            st.warning("Voc√™ precisa de permiss√µes de edi√ß√£o para cadastrar novos sistemas.")
        else:
            st.info("Use este formul√°rio simplificado para cadastrar rapidamente um sistema de alarme com informa√ß√µes b√°sicas.")
            
            with st.form("quick_alarm_form", clear_on_submit=True):
                st.subheader("Dados Essenciais")
                
                # Campos b√°sicos
                quick_id = st.text_input("ID do Sistema*", placeholder="AL-001")
                quick_location = st.text_input("Localiza√ß√£o*", placeholder="Pr√©dio Principal - Andar 1")
                
                # Tipo de sistema
                st.markdown("**Tipo de Sistema:**")
                system_type = st.radio(
                    "Selecione o tipo",
                    ["Convencional", "Endere√ß√°vel", "Sem Fio"],
                    horizontal=True
                )
                
                # Marca com op√ß√µes pr√©-definidas
                quick_brand = st.selectbox(
                    "Marca (opcional)", 
                    ["", "Siemens", "Honeywell", "Johnson Controls", "Bosch", "Tyco", "MSA", "OUTRO"],
                    index=0
                )
                
                # Campo para marca personalizada
                if quick_brand == "OUTRO":
                    custom_brand = st.text_input("Digite a marca:")
                    final_brand = custom_brand
                else:
                    final_brand = quick_brand
                
                # Bot√£o para submeter o formul√°rio
                quick_submit = st.form_submit_button("Cadastrar R√°pido", type="primary", use_container_width=True)
                
                if quick_submit:
                    # Valida√ß√£o b√°sica
                    if not quick_id or not quick_location:
                        st.error("ID e Localiza√ß√£o s√£o obrigat√≥rios.")
                    else:
                        # Salva o sistema no invent√°rio
                        with st.spinner("Cadastrando..."):
                            if save_new_alarm_system(quick_id, quick_location, final_brand, system_type):
                                st.success(f"Sistema '{quick_id}' cadastrado rapidamente!")
                                st.balloons()
                                st.cache_data.clear()
                            else:
                                st.error("Erro ao cadastrar. Verifique se o ID j√° n√£o existe.")
