"""
Script para processar notifica√ß√µes pendentes e enviar emails
Executa via GitHub Actions periodicamente
"""

import json
import smtplib
import os
import ast
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from jinja2 import Template
from google.oauth2 import service_account
from googleapiclient.discovery import build

EMAIL_TEMPLATES = {
    'access_approved': {
        'subject': 'üéâ Seu acesso foi aprovado! - ISF IA',
        'template': '''
Ol√° {{recipient_name}},

üéâ **Excelente not√≠cia!** Seu acesso ao Sistema ISF IA foi aprovado!

‚úÖ **Detalhes da sua conta:**
‚Ä¢ Plano: Premium IA (Trial)
‚Ä¢ Dura√ß√£o do teste: {{trial_days}} dias
‚Ä¢ Acesso completo a todas as funcionalidades

üöÄ **Como come√ßar:**
1. Acesse: {{login_url}}
2. Fa√ßa login com o mesmo email ({{recipient_email}})
3. Explore todas as funcionalidades do sistema

üí° **Durante o trial voc√™ ter√° acesso a:**
‚Ä¢ Processamento autom√°tico com IA
‚Ä¢ Extra√ß√£o de dados de PDFs
‚Ä¢ An√°lise inteligente de documentos
‚Ä¢ Relat√≥rios com insights avan√ßados
‚Ä¢ Suporte priorit√°rio

‚è∞ **Importante:** Seu trial expira em {{trial_days}} dias. Para garantir continuidade, voc√™ pode contratar um plano atrav√©s do seu perfil no sistema.

Em caso de d√∫vidas, responda este email ou entre em contato conosco.

Bem-vindo ao ISF IA!

Atenciosamente,
Equipe ISF IA
'''
    },
    
    'access_denied': {
        'subject': '‚ùå Solicita√ß√£o de acesso - ISF IA',
        'template': '''
Ol√° {{recipient_name}},

Obrigado por seu interesse no Sistema ISF IA.

Infelizmente, n√£o pudemos aprovar sua solicita√ß√£o de acesso neste momento.

{% if reason %}
**Motivo:** {{reason}}
{% endif %}

Voc√™ pode solicitar acesso novamente a qualquer momento. Para mais informa√ß√µes, entre em contato conosco.

Atenciosamente,
Equipe ISF IA
'''
    },
    
    'trial_expiring': {
        'subject': '‚è∞ Seu trial expira em {{days_left}} dias - ISF IA',
        'template': '''
Ol√° {{recipient_name}},

Esperamos que esteja aproveitando o Sistema ISF IA!

‚è∞ **Aviso importante:** Seu per√≠odo de teste expira em {{days_left}} dias.

üîÑ **Para continuar usando o sistema:**
1. Acesse seu perfil: {{login_url}}
2. V√° em "Planos e Pagamento"
3. Escolha o plano que melhor atende suas necessidades

üíé **Nossos planos:**
‚Ä¢ **Pro** (R$ 39,90/m√™s): Funcionalidades completas
‚Ä¢ **Premium IA** (R$ 69,90/m√™s): Automa√ß√£o com Intelig√™ncia Artificial

N√£o perca seus dados e configura√ß√µes! Efetue a contrata√ß√£o antes do vencimento.

Em caso de d√∫vidas, estamos aqui para ajudar.

Atenciosamente,
Equipe ISF IA
'''
    },
    
    'payment_confirmed': {
        'subject': '‚úÖ Pagamento confirmado - {{plan_name}} - ISF IA',
        'template': '''
Ol√° {{recipient_name}},

üéâ **Pagamento confirmado com sucesso!**

‚úÖ **Detalhes:**
‚Ä¢ Plano contratado: {{plan_name}}
‚Ä¢ Status: Ativo
‚Ä¢ Pr√≥xima cobran√ßa: 30 dias

Seu acesso completo j√° est√° liberado. Continue aproveitando todas as funcionalidades do ISF IA!

Acesse: {{login_url}}

Obrigado por confiar em nosso sistema!

Atenciosamente,
Equipe ISF IA
'''
    },
    
    'new_access_request': {
        'subject': 'üîî Nova solicita√ß√£o de acesso - ISF IA',
        'template': '''
Ol√° Administrador,

üì¨ **Nova solicita√ß√£o de acesso recebida!**

üë§ **Dados do solicitante:**
‚Ä¢ Nome: {{requesting_user_name}}
‚Ä¢ Email: {{requesting_user_email}}
‚Ä¢ Data da solicita√ß√£o: {{timestamp}}

üí≠ **Justificativa:**
{{justification}}

üéØ **A√ß√£o necess√°ria:**
Acesse o painel administrativo para aprovar ou rejeitar a solicita√ß√£o:
{{admin_panel_url}}

‚û°Ô∏è V√° em: Super Admin ‚Üí Solicita√ß√µes

Atenciosamente,
Sistema ISF IA
'''
    }
}

def get_google_sheets_service():
    """Inicializa servi√ßo do Google Sheets"""
    credentials_json = os.environ['GOOGLE_CREDENTIALS']
    credentials_dict = json.loads(credentials_json)
    
    credentials = service_account.Credentials.from_service_account_info(
        credentials_dict,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    
    return build('sheets', 'v4', credentials=credentials)

def get_pending_notifications(sheets_service, spreadsheet_id):
    """Busca notifica√ß√µes pendentes na planilha"""
    try:
        range_name = "notificacoes_pendentes!A:F"
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range=range_name
        ).execute()
        
        values = result.get('values', [])
        if not values or len(values) < 2:
            return []
        
        # Converte para lista de dicion√°rios
        headers = values[0]
        notifications = []
        
        for i, row in enumerate(values[1:], 2):  # i=2 para linha da planilha
            if len(row) >= 6 and row[5] == 'pendente':
                notification_data = {
                    'row_index': i,
                    'timestamp': row[0],
                    'type': row[1], 
                    'email': row[2],
                    'name': row[3],
                    'data': row[4],
                    'status': row[5]
                }
                notifications.append(notification_data)
        
        return notifications
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar notifica√ß√µes: {e}")
        return []

def send_email(smtp_config, recipient_email, subject, body_html):
    """Envia email usando configura√ß√£o SMTP"""
    try:
        msg = MIMEMultipart('alternative')
        
        # Limpa e valida os campos do cabe√ßalho
        from_name = smtp_config['from_name'].strip().replace('\n', '').replace('\r', '')
        from_email = smtp_config['from_email'].strip().replace('\n', '').replace('\r', '')
        recipient_email = recipient_email.strip().replace('\n', '').replace('\r', '')
        subject = subject.strip().replace('\n', ' ').replace('\r', ' ')
        
        msg['From'] = f"{from_name} <{from_email}>"
        msg['To'] = recipient_email
        msg['Subject'] = subject
        
        html_part = MIMEText(body_html, 'html', 'utf-8')
        msg.attach(html_part)
        
        server = smtplib.SMTP(smtp_config['server'], smtp_config['port'])
        server.starttls()
        server.login(smtp_config['username'], smtp_config['password'])
        
        text = msg.as_string()
        server.sendmail(smtp_config['from_email'], recipient_email, text)
        server.quit()
        
        print(f"‚úÖ Email enviado para {recipient_email}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar email para {recipient_email}: {e}")
        return False

def update_notification_status(sheets_service, spreadsheet_id, row_index, status):
    """Atualiza status da notifica√ß√£o na planilha"""
    try:
        range_name = f"notificacoes_pendentes!F{row_index}"
        body = {'values': [[status]]}
        
        sheets_service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id,
            range=range_name,
            valueInputOption='RAW',
            body=body
        ).execute()
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao atualizar status: {e}")
        return False

def process_notification(notification, smtp_config, sheets_service, spreadsheet_id):
    """Processa uma notifica√ß√£o individual"""
    
    notification_type = notification['type']
    recipient_email = notification['email']
    recipient_name = notification['name']
    
    # Parse dos dados da notifica√ß√£o
    try:
        # Tenta fazer parse do JSON
        data_str = notification['data']
        if data_str.startswith('{'):
            data_dict = json.loads(data_str)
        else:
            # Se n√£o for JSON v√°lido, tenta eval (compatibilidade com vers√£o antiga)
            data_dict = ast.literal_eval(data_str) if data_str else {}
    except:
        data_dict = {}
    
    # Busca template
    if notification_type not in EMAIL_TEMPLATES:
        print(f"‚ùå Template n√£o encontrado para: {notification_type}")
        return False
    
    template_data = EMAIL_TEMPLATES[notification_type]
    
    # Dados padr√£o para template
    template_vars = {
        'recipient_name': recipient_name,
        'recipient_email': recipient_email,
        'login_url': data_dict.get('login_url', 'https://isnpecoessmaia.streamlit.app'),
        'trial_days': data_dict.get('trial_days', '14'),
        'reason': data_dict.get('reason', ''),
        'days_left': data_dict.get('days_left', '3'),
        'plan_name': data_dict.get('plan_name', ''),
        'timestamp': notification['timestamp'],
        # Novos campos para solicita√ß√£o de acesso
        'requesting_user_name': data_dict.get('requesting_user_name', ''),
        'requesting_user_email': data_dict.get('requesting_user_email', ''),
        'justification': data_dict.get('justification', 'Nenhuma justificativa fornecida'),
        'admin_panel_url': data_dict.get('admin_panel_url', 'https://isnpecoessmaia.streamlit.app')
    }
    
    # Renderiza template
    subject_template = Template(template_data['subject'])
    body_template = Template(template_data['template'])
    
    subject = subject_template.render(**template_vars)
    body_text = body_template.render(**template_vars)
    
    # Converte para HTML
    body_html = body_text.replace('\n', '<br>\n')
    body_html = f"<html><body><pre style='font-family: Arial, sans-serif; white-space: pre-wrap;'>{body_html}</pre></body></html>"
    
    # Envia email
    success = send_email(smtp_config, recipient_email, subject, body_html)
    
    if success:
        # Marca como enviado na planilha
        update_notification_status(sheets_service, spreadsheet_id, notification['row_index'], 'enviado')
        print(f"‚úÖ Notifica√ß√£o {notification_type} processada para {recipient_email}")
    else:
        # Marca como erro
        update_notification_status(sheets_service, spreadsheet_id, notification['row_index'], 'erro')
        print(f"‚ùå Falha ao processar notifica√ß√£o {notification_type} para {recipient_email}")
    
    return success

def main():
    """Fun√ß√£o principal"""
    print("üîÑ Iniciando processamento de notifica√ß√µes...")
    
    # Configura√ß√£o SMTP
    smtp_config = {
        'server': os.environ['SMTP_SERVER'],
        'port': int(os.environ['SMTP_PORT']),
        'username': os.environ['SMTP_USERNAME'],
        'password': os.environ['SMTP_PASSWORD'],
        'from_email': os.environ['FROM_EMAIL'],
        'from_name': os.environ['FROM_NAME']
    }
    
    # Servi√ßos Google
    sheets_service = get_google_sheets_service()
    spreadsheet_id = os.environ['MATRIX_SHEETS_ID']
    
    # Busca notifica√ß√µes pendentes
    notifications = get_pending_notifications(sheets_service, spreadsheet_id)
    
    if not notifications:
        print("‚úÖ Nenhuma notifica√ß√£o pendente encontrada.")
        return
    
    print(f"üìß Encontradas {len(notifications)} notifica√ß√µes pendentes.")
    
    # Processa cada notifica√ß√£o
    processed = 0
    for notification in notifications:
        try:
            if process_notification(notification, smtp_config, sheets_service, spreadsheet_id):
                processed += 1
        except Exception as e:
            print(f"‚ùå Erro ao processar notifica√ß√£o: {e}")
    
    print(f"‚úÖ Processamento conclu√≠do: {processed}/{len(notifications)} enviadas com sucesso.")

if __name__ == "__main__":
    main()
