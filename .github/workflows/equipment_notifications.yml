name: Equipment Notifications System

on:
  schedule:
    # Segunda-feira √†s 9h - Notifica√ß√µes semanais (30 dias)
    - cron: '0 9 * * 1'
    # Todos os dias √†s 8h - Notifica√ß√µes urgentes (7 dias)
    - cron: '0 8 * * *'
    # A cada 30 minutos - Processa emails pendentes de equipamentos
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # Permite execu√ß√£o manual
    inputs:
      action:
        description: 'A√ß√£o a executar'
        required: true
        default: 'process_pending'
        type: choice
        options:
        - process_pending
        - send_weekly
        - send_urgent
        - send_all

jobs:
  process-equipment-emails:
    if: github.event.schedule == '*/30 * * * *' || github.event.inputs.action == 'process_pending'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client jinja2
        
    - name: Process Pending Equipment Notifications
      env:
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        FROM_NAME: ${{ secrets.FROM_NAME }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        MATRIX_SHEETS_ID: ${{ secrets.MATRIX_SHEETS_ID }}
      run: |
        python .github/scripts/send_equipment_email.py

  generate-weekly-notifications:
    if: github.event.schedule == '0 9 * * 1' || github.event.inputs.action == 'send_weekly' || github.event.inputs.action == 'send_all'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client jinja2 pandas pytz
        
    - name: Generate Weekly Equipment Notifications
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        MATRIX_SHEETS_ID: ${{ secrets.MATRIX_SHEETS_ID }}
        APP_URL: ${{ secrets.APP_URL }}
        CENTRAL_DRIVE_FOLDER_ID: ${{ secrets.CENTRAL_DRIVE_FOLDER_ID }}
      run: |
        python -c "
        import sys
        import os
        import logging
        
        # Configurar logging detalhado
        logging.basicConfig(
            level=logging.INFO, 
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        logger = logging.getLogger(__name__)
        
        sys.path.append('.')
        
        try:
            print('üîß Iniciando gera√ß√£o de notifica√ß√µes semanais de equipamentos...')
            logger.info('Importando m√≥dulo de notifica√ß√µes de equipamentos')
            
            from utils.equipment_notifications import send_weekly_equipment_notifications
            
            print('üìä M√≥dulo importado com sucesso. Executando notifica√ß√µes...')
            send_weekly_equipment_notifications()
            print('‚úÖ Notifica√ß√µes semanais geradas com sucesso!')
            
        except Exception as e:
            print(f'‚ùå Erro ao gerar notifica√ß√µes semanais: {e}')
            import traceback
            print('Stack trace completo:')
            traceback.print_exc()
            logger.error(f'Erro cr√≠tico: {e}')
            exit(1)
        "

  generate-urgent-notifications:
    if: github.event.schedule == '0 8 * * *' || github.event.inputs.action == 'send_urgent' || github.event.inputs.action == 'send_all'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client jinja2 pandas pytz
        
    - name: Generate Urgent Equipment Notifications
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        MATRIX_SHEETS_ID: ${{ secrets.MATRIX_SHEETS_ID }}
        APP_URL: ${{ secrets.APP_URL }}
        CENTRAL_DRIVE_FOLDER_ID: ${{ secrets.CENTRAL_DRIVE_FOLDER_ID }}
      run: |
        python -c "
        import sys
        import os
        import logging
        
        # Configurar logging detalhado
        logging.basicConfig(
            level=logging.INFO, 
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        logger = logging.getLogger(__name__)
        
        sys.path.append('.')
        
        try:
            print('üö® Iniciando gera√ß√£o de notifica√ß√µes urgentes de equipamentos...')
            logger.info('Importando m√≥dulo de notifica√ß√µes de equipamentos')
            
            from utils.equipment_notifications import send_daily_urgent_notifications
            
            print('‚ö° M√≥dulo importado com sucesso. Executando notifica√ß√µes urgentes...')
            send_daily_urgent_notifications()
            print('‚úÖ Notifica√ß√µes urgentes geradas com sucesso!')
            
        except Exception as e:
            print(f'‚ùå Erro ao gerar notifica√ß√µes urgentes: {e}')
            import traceback
            print('Stack trace completo:')
            traceback.print_exc()
            logger.error(f'Erro cr√≠tico: {e}')
            exit(1)
        "

  health-check:
    if: github.event.inputs.action == 'send_all'
    runs-on: ubuntu-latest
    needs: [generate-weekly-notifications, generate-urgent-notifications]
    
    steps:
    - name: Equipment Notifications Health Check
      run: |
        echo "üîß Sistema de Notifica√ß√µes de Equipamentos"
        echo "‚úÖ Notifica√ß√µes semanais: Conclu√≠do"
        echo "‚úÖ Notifica√ß√µes urgentes: Conclu√≠do"
        echo "üìä Status: Sistema operacional"
        echo "‚è∞ Pr√≥xima execu√ß√£o autom√°tica:"
        echo "   - Processamento: A cada 30 minutos"
        echo "   - Semanal: Segundas √†s 9h"
        echo "   - Urgente: Todos os dias √†s 8h"
        echo ""
        echo "üîç Debug Info:"
        echo "   - MATRIX_SHEETS_ID est√° configurado: $([[ -n \"$MATRIX_SHEETS_ID\" ]] && echo 'Sim' || echo 'N√£o')"
        echo "   - GOOGLE_CREDENTIALS est√° configurado: $([[ -n \"$GOOGLE_CREDENTIALS\" ]] && echo 'Sim' || echo 'N√£o')"
        echo "   - APP_URL est√° configurado: $([[ -n \"$APP_URL\" ]] && echo 'Sim' || echo 'N√£o')"
      env:
        MATRIX_SHEETS_ID: ${{ secrets.MATRIX_SHEETS_ID }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        APP_URL: ${{ secrets.APP_URL }}
