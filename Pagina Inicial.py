import streamlit as st
import sys
import os
from auth.login_page import show_login_page, show_user_header, show_logout_button
from auth.auth_utils import is_user_logged_in, is_admin, can_edit, can_view, get_user_role
from operations.demo_page import show_demo_page
from config.page_config import set_page_config 

set_page_config()

def show_admin_homepage():
    """Conte√∫do completo para administradores."""
    st.sidebar.success("üëë Acesso de Administrador")
    st.title("Bem-vindo ao ISF IA!")
    st.subheader("Sistema de Fiscaliza√ß√£o e Inspe√ß√µes com Intelig√™ncia Artificial")
    st.markdown("""
    Use a barra de navega√ß√£o √† esquerda para acessar as funcionalidades do sistema.

    - **Inspe√ß√£o de Extintores**: Registre novas inspe√ß√µes, extraia dados de relat√≥rios PDF com IA e salve o hist√≥rico.
    - **Situa√ß√£o Atual**: Visualize um dashboard com o status de todos os equipamentos.
    - **Hist√≥rico de Inspe√ß√µes**: Consulte todos os registros j√° realizados.
    
    Este sistema foi projetado para otimizar e padronizar o processo de inspe√ß√£o de equipamentos de combate a inc√™ndio, 
    garantindo conformidade com as normas e seguran√ßa.
    """)

def show_editor_homepage():
    """Conte√∫do para editores (pode ser o mesmo do admin ou um pouco diferente)."""
    st.sidebar.info("‚úèÔ∏è Acesso de Editor")
    st.title("Bem-vindo ao ISF IA!")
    st.subheader("Sistema de Fiscaliza√ß√£o e Inspe√ß√µes com Intelig√™ncia Artificial")
    st.markdown("""
    Voc√™ tem permiss√£o para registrar novas inspe√ß√µes e atualizar o status dos equipamentos.
    Use a barra de navega√ß√£o √† esquerda para acessar as funcionalidades de edi√ß√£o.
    """)

def main():
    if not is_user_logged_in():
        show_login_page()
        return

    show_user_header()
    show_logout_button() 

    user_role = get_user_role()

    import streamlit as st
import sys
import os
from auth.login_page import show_login_page, show_user_header, show_logout_button
from auth.auth_utils import is_user_logged_in, get_user_info, initialize_unit_session, get_matrix_data
from operations.demo_page import show_demo_page
from config.page_config import set_page_config 

set_page_config()

def show_admin_homepage():
    """Conte√∫do completo para administradores."""
    st.sidebar.success("üëë Acesso de Administrador")
    st.title("Bem-vindo ao ISF IA!")
    st.subheader("Sistema de Fiscaliza√ß√£o e Inspe√ß√µes com Intelig√™ncia Artificial")
    st.markdown("""
    Use a barra de navega√ß√£o √† esquerda para acessar as funcionalidades do sistema.

    - **Inspe√ß√£o de Extintores**: Registre novas inspe√ß√µes, extraia dados de relat√≥rios PDF com IA e salve o hist√≥rico.
    - **Situa√ß√£o Atual**: Visualize um dashboard com o status de todos os equipamentos.
    - **Hist√≥rico de Inspe√ß√µes**: Consulte todos os registros j√° realizados.
    
    Este sistema foi projetado para otimizar e padronizar o processo de inspe√ß√£o de equipamentos de combate a inc√™ndio, 
    garantindo conformidade com as normas e seguran√ßa.
    """)

def show_editor_homepage():
    """Conte√∫do para editores (pode ser o mesmo do admin ou um pouco diferente)."""
    st.sidebar.info("‚úèÔ∏è Acesso de Editor")
    st.title("Bem-vindo ao ISF IA!")
    st.subheader("Sistema de Fiscaliza√ß√£o e Inspe√ß√µes com Intelig√™ncia Artificial")
    st.markdown("""
    Voc√™ tem permiss√£o para registrar novas inspe√ß√µes e atualizar o status dos equipamentos.
    Use a barra de navega√ß√£o √† esquerda para acessar as funcionalidades de edi√ß√£o.
    """)

def show_homepage_for_role(role):
    if role == 'admin':
        show_admin_homepage()
    elif role == 'editor':
        show_admin_homepage() # Reutilizando a fun√ß√£o
    elif role == 'viewer':
        st.sidebar.warning("üëÅÔ∏è Acesso Somente Leitura")
        show_demo_page()
    else:
        st.sidebar.error("üîí Acesso de Demonstra√ß√£o")
        show_demo_page()

def main():
    if not is_user_logged_in():
        show_login_page()
        return

    show_user_header()
    show_logout_button() 

    role, assigned_unit = get_user_info()
    
    # --- L√ìGICA DE SELE√á√ÉO DE UNIDADE OPERACIONAL ---
    selected_unit = None
    if role == 'admin' and assigned_unit == '*':
        # Administrador Global: pode escolher a UO
        _, units_df = get_matrix_data()
        unit_options = units_df['nome_unidade'].tolist()
        if unit_options:
            selected_unit = st.sidebar.selectbox("Selecionar Unidade Operacional:", unit_options)
        else:
            st.sidebar.error("Nenhuma UO cadastrada.")
    else:
        # Usu√°rio normal: UO √© fixa
        selected_unit = assigned_unit

    # Se uma UO foi selecionada/atribu√≠da, inicializa a sess√£o com seus IDs
    if selected_unit:
        if initialize_unit_session(selected_unit):
            # Exibe a p√°gina principal somente se a sess√£o da UO foi carregada com sucesso
            show_homepage_for_role(role)
    else:
        st.error("Nenhuma Unidade Operacional associada a este usu√°rio.")

if __name__ == "__main__":
    main()
    st.caption('Copyright 2024, Cristian Ferreira Carlos, Todos os direitos reservados.')
    st.caption('https://www.linkedin.com/in/cristian-ferreira-carlos-256b19161/')


if __name__ == "__main__":
    main()
    st.caption('Copyright 2024, Cristian Ferreira Carlos, Todos os direitos reservados.')
    st.caption('https://www.linkedin.com/in/cristian-ferreira-carlos-256b19161/')
